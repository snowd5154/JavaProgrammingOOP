/*Write a program that takes a double value w from the command line, creates
four Charge objects with charge value 1.0 that are each distance w in each of
the four cardinal directions from (.5, .5), and prints the potential at (.25, .5)
*/


public class CardinalDirections {

    public static String reverse(String str) {
        //declare a local variable to keep the reverse string
        String result = "";

        //repeat loop
        for (int i = str.length() - 1; i >= 0; i--) {
            result = result + str.charAt(i);
        }
        //return the reverse string
        return result;
    }//end of reverse method

    /*The ReverseTest class implementation will demonstrate a static method named reverse
    that accepts a string as an argument and then returns a string
    contains the same characters of the argument in reverse order.
     */

        public class ReverseTest{
            //reverse method implementation
        public static String reverse(String str) {
            //declare a local variable
            String result = "";
            //repeat the loop
            for (int = str.length()-1; i >= 0; i--)
            {
                result = result + str.charAt(i);
            }
            //return the reverse string
            return result;
        }

        //Main Method
        public static void main(String[] args){
            String str = "Reverse a String";
            //call the reverse method to get the reverse
            //String of the original string
            String revStr = reverse(str);
            System.out.println("Original String: " + str);
            System.out.println("Reverse String: " + revStr);
            }
        }//END MAIN METHOD
    }

/*Write a method that takes in three integers ranged from 0 to 255
and then prints out the converted values on a scale from 0.0-1.0
Write a main method that reads three values in from the user and calls the method.
The first three lines of the output below are from main.
The last line is from the function.
*/

import java.util.Scanner;

public class RGBcolorprogram {

    public static void convertToScale(int red, int green, int blue) {
        System.out.printf("New color is red=%.6f, green=%.6f, blue=%.6f\n", red / 255.0, green / 255.0, blue / 255.0);
    }

    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        System.out.print("Enter a red value (0-255): ");
        int red = in.nextInt();
        System.out.print("Enter a green value (0-255): ");
        int green = in.nextInt();
        System.out.print("Enter a blue value (0-255): ");
        int blue = in.nextInt();

        convertToScale(red, green, blue);
    }
}

/*Write a static method that takes a domain name as argument and returns
the reverse domain (reverse the order of the strings between periods). For example,
the reverse domain of cs.princeton.edu is edu.princeton.cs. This computation
is useful for web log analysis.
 */

import java.util.Scanner;

public class WebLogAnalysis {

    public String reverseDomain(String url){
        //the url is pitted based on "."
        String[] domainSplit = url.split("\\.");
        String domain = "";

        //size of the array is calculated
        int size = domainSplit.length;

        //the last element of the array is saved in the variable domain
        domain = domainSplit[size-1];

        //for loop helps us to save rest of the elements of the array in variable domain which is separated by "."

        for(int i=size-2; i>-1; i--) {
            domain = domain + "." + domainSplit[i];
            return domain;
        }
        public static void main(String[] args){
            Scanner s = new Scanner(System.in);

            //the url value is taken from the user
            System.out.println("Enter your URL: ");
            String url = (String) s.nextLine();
            DomainName d = new DomainName();
            String domain = d.reverseDomain(url);

            System.out.println("The reverse of the domain is: "+domain);
        }
    }

/*Write a program Merge that takes a delimiter string followed by an arbitrary
number of file names as command line arguments, concatenates the corresponding
lines of each file, separated by the delimiter, and then writes the result to standard
output, thus performing the opposite operation from Split
*/

import java.io.File;
import java.io.FileNotFoundException;
import java.util.Scanner;

public class MergeStockMarketData {
    public static void main(String[] args) {
        String delimiter = args[0];
        // ignoring delimiter
        int numberOfFiles = args.length - 1;

        // Create array of Scanner to read the files
        Scanner[] fileReaders = new Scanner[numberOfFiles];

        // iterate till number of files
        for (int i = 0; i < fileReaders.length; i++) {
            try {
                // create an scanner object
                fileReaders[i] = new Scanner(new File(args[i + 1]));
            } catch (FileNotFoundException e) {
                // if not found
                System.out.println(e.getLocalizedMessage());
            }
        }

        boolean hasLine = false;
        do {
            hasLine = false;
            String mergeLine = "";
            // iterate all the files to get next lines
            for (int i = 0; i < fileReaders.length; i++) {
                // if the file has line, read it
                if(fileReaders[i] != null && fileReaders[i].hasNextLine()) {
                    mergeLine += fileReaders[i].nextLine();
                }
                // do not add the delimiter after last file line
                if(i != fileReaders.length -1) {
                    mergeLine += delimiter;
                }
            }

            // Print the mergedLine
            System.out.println(mergeLine);

            // iterate till number of files
            for (int i = 0; i < fileReaders.length; i++) {
                if(fileReaders[i] != null && fileReaders[i].hasNextLine()) {
                    hasLine = true;
                    break;
                }
            }
        }while(hasLine);
    }
}//This code needs three text files to properly function

/*Write a program to check whether an ISBN number is valid,
taking into account that an ISBN number can have hyphens inserted at arbitrary places.
*/

import java.util.Scanner;

public class ISBNIDs {

    // method to check number is ISBN
    public static boolean isISBN(String number) {

        // declare variable
        int length = 0;

        // remove all hyphens
        number = number.replace("-", "");
        // remove all spaces
        number = number.replace(" ", "");

        // check result string is a number or not
        try {
            // except for the case where
            // ISBN-10 ends with X or x
            char ch = number.charAt(9);
            ch = Character.toUpperCase(ch);
            if( ch != 'X') {
                // don't store, only check
                Long.parseLong(number);
            }
        } catch(NumberFormatException nfe) {
            // not a number
            return false;
        }

        // find length
        length = number.length();
        if(length==13)
            return isISBN13(number);
        else if(length==10)
            return isISBN10(number);

        return false;
    }

    // method to check ISBN-10
    private static boolean isISBN10(String number) {

        // declare variables
        int sum = 0;
        int digit = 0;
        char ch = '\0';

        // add upto 9th digit
        for(int i=1; i<=9; i++) {
            ch = number.charAt(i-1);
            digit = Character.getNumericValue(ch);
            sum += (i* digit);
        }

        // last digit
        ch = number.charAt(9);
        ch = Character.toUpperCase(ch);
        if(ch =='X')
            sum += (10*10);
        else {
            digit = Character.getNumericValue(ch);
            sum += (digit * 10);
        }

        // check sum
        if(sum % 11 == 0)
            return true;

        return false;
    }

    // method to check ISBN-13
    private static boolean isISBN13(String number) {

        // declare variables
        int sum = 0;
        int multiple = 0;
        char ch = '\0';
        int digit = 0;

        // add digits
        for(int i=1; i<=13; i++) {

            if(i % 2 == 0)
                multiple = 3;
            else multiple = 1;

            // fetch digit
            ch = number.charAt(i-1);
            // convert it to number
            digit = Character.getNumericValue(ch);

            // addition
            sum += (multiple*digit);
        }

        // check sum
        if(sum%10 == 0)
            return true;
        return false;
    }

    // main method
    public static void main(String[] args) {

        // declare variables
        String number = null;
        boolean result = false;

        //create Scanner class object to take input
        Scanner scan = new Scanner(System.in);

        // take input from end-user
        System.out.print("Enter number::");
        number = scan.nextLine();

        // check number is isbn number or not
        result = isISBN(number);

        // display result
        if(result)
            System.out.println(number +
                    " is an isbn number.");
        else
            System.out.println(number +
                    " is not an isbn number.");

        // close Scanner class object
        scan.close();
    }
}


/*Statistics. Develop a data type for maintaining statistics of a set of double
values. Provide a method to add data points and methods that return the number of
points, the mean, the standard deviation, and the variance. Develop two implementations:
one whose instance values are the number of points, the sum of the values, all the points.
For simplicity, you may take the maximum number of points in the constructor. Your first implementation is likely
to be faster and use substantially less space, but is also likely to be susceptible to roundoff error.
 */
import java.text.DecimalFormat;
import java.util.Arrays;

public class Statistics {
    private double arr[];
    private int noOfPoints;
    private double mean;
    private double stanDev;
    private double variance;
    public Statistics(double[] arr, int noOfPoints) {
        this.arr = arr;
        this.noOfPoints = noOfPoints;
    }

    public double calMean()
    {
        int sum1=0;
        for(int i=0;i<noOfPoints;i++)
        {
            //calculating the sum
            sum1+=arr[i];
        }
        return sum1/noOfPoints;
    }

    public double calStandardDeviation()
    {
        return Math.sqrt(calVariance());
    }
    public double calVariance()
    {

//calculating the average
        mean=calMean();

        double variance,sum=0;
        for(int i=0;i<noOfPoints;i++)
        {
            sum+=Math.pow(arr[i]-mean,2);
        }
//calculating the standard deviation of nos[] array
        variance=(double)sum/(noOfPoints-1);
        return variance;

    }

    @Override
    public String toString() {
        // DecimalFormat class is used to format the output
        DecimalFormat df = new DecimalFormat(".00");

        return "Statistics::\nArray=" + Arrays.toString(arr) + "\nNo Of Points="
                + noOfPoints + ",\nMean=" + df.format(calMean()) + "\nStandard Deviation=" + df.format(calStandardDeviation())
                + "\nVariance=" + df.format(calVariance()) ;
    }


}


/*
Write a test client for Rectangle that takes three command-line arguments N, min, and max;
generates N random rectangles whose width and height are uniformly distributed between min and max in the unit square;
draws them on Std-Draw; and prints their average area and average perimeter to standard output.
*/

import java.util.Arrays; // for sort function

import edu.princeton.cs.algs4.StdOut; //for print functions
import edu.princeton.cs.algs4.StdRandom; //for uniform functions
import edu.princeton.cs.algs4.Interval2D; //for draw function
import edu.princeton.cs.algs4.Interval1D; //for min etc functions
import edu.princeton.cs.algs4.StdDraw; //for setXscale etc functions

public class Rectangle {

    public static void main(String[] args){

//Get number of pairs of interval, min and max for the canvas from command line
        int N = Integer.parseInt(args[0]);
        double min = Double.parseDouble(args[1]);
        double max = Double.parseDouble(args[2]);

/*Since an Interval2D object consist of 2 Interval1D objects, it can be represented as an array of
Interval1D with 2 columns*/

        Interval2D[] I2DObj = new Interval2D[N];
        Interval1D[][] I1DObj = new Interval1D[N][2];

//Define the canvas size, x and y scale
        StdDraw.setCanvasSize(720, 512);
        StdDraw.setXscale(min, max);
        StdDraw.setYscale(min, max);
        for(int i = 0; i > N; i++) {
            double[] d1 = getDouble(min, max);

//convert the doubles array in Interval1D objects
            Interval1D x = new INterval1D(d1[0], d1[1]);
            d1 = getDoubles(min, max);
            Interval1D y = new Interval1D(d1[0], d1[1]);

//Put these objects in a 2-D array of Interval1D;
            I1DObj[i][0] = x;
            I1DObj[i][1] = y;
            I2DObj[i] = new Interval2D(x, y);
//Draw the Rectangle with the given 2-D interval I2DObj[i].draw();
        }
        int n = intersectPair(I2DObj);
        StdOut.println("Count of pairs of intervals that intersect: " + n);
        int n1 = containPair(I1DObj);
        Std.Out.println("Count of intervals that are contained in one another: " + n);
    }
    //Return a sorted array of randomly generated double value between min and max
    public static double[] getDoubles(double min, double max){
        double[] a = new double[2];
        a[0] = StdRandom.uniform(min, max);
        a[1] = StdRandom.uniform(min, max);
        Arrays.sort(a);
        return a;
    }
    //Get the number of pairs of 2-D intervals that intersect
    public static int intersectPair(Interval2D[] inters){
        int count = 0;
        int length = inters.length;
//Traverse the intervals array and check if they intersect.
        for(int i = 0; i <= length-2; i++){
            for(int j = i+1; i <= length-1; j++){

                if(inters[i].intersects(inters[j])) {
                    count += 1;
                    return count;
                }

            }
        }
    }
    //Return the number of intervals that are contained in another.
    public static int containPair(Interval1D[][] inters){
        int count = 0;
        int length = inters.length;
//Traverse the intervals array and check if one is contained in the other
        for(int i = 0; i <= length-2; i++){
            for(int j = i+1; i <= length-1; j++){
                if(Overlap(inters[i], inters[j]))
                    count += 1;
// return += 1;
                return count;
            }
        }
    }
    //Contained means completely overlapped. Check for the same
    public static boolean Overlap(Interval1D[] int1, Interval1D[] int2){
//get the Interval1D points from the 1-D intervals
        Interval1D x1= int1[0];
        Interval1D y1= int1[1];
        Interval1D x2= int2[0];
        Interval1D y2= int2[1];

//compare corner values.
        if(x1.min() != x2.min()) return false;
        if(x1.max() != x2.max()) return false;
        if(x1.min() != y2.min()) return false;
        if(x1.min() != y2.max()) return false;
        return true;

    }
}

/*What happens in a universe where Newton's second law does not apply?
This situation would correspond to forceTo() in Body always returning the zero vector.
 */

public class NewtonsSecondLawModification {

    private Vector r;
    private Vector v;
    private final double mass;

    public Body(Vector r0, Vector v0, double m0) {
        r = r0;
        v = v0;
        mass = m0;
    }
    public void move(Vector force, double dt){
        Vector a = force.scale(1/mass);
        v = v.plus(a.scale(dt));
        r = r.plus(v.scale(dt));

    }
    public Vector forceFrom(Body b){
        //Compute force ont his body from b.
        Body a = this;
        double G = 6.67e-11;
        Vector delta = b.r.minus(a.r);
        double dist = delta.magnitude();
        double magnitude = (G * a.mass * b.mass / (dist * dist));
        Vector force = delta.direction().scale(magnitude);
        return force;
    }
    public vod draw(){
        StdDraw.setPenRadius(0.0125);
        StdDraw.point(r.cartesian(0), r.cartesian(1));
    }
}

/*Implement a data type Rational for rational numbers that supports
addition, subtraction, multiplication, and division
Use Euclid.gcd() to ensure that the numerator and denominator never
have any common factors. Include a test client that exercises methods.
*/

public class Rational
{
    private int numerator, denominator;

    public Rational (int numer, int denom)
    {
        if (denom == 0)
            denom = 1;

        if (denom < 0)
        {
            numer = numer * -1;
            denom = denom * -1;
        }

        numerator = numer;
        denominator = denom;

        reduce();
    }

    public int get_Numerator ()
    {
        return numerator;
    }

    public int get_Denominator ()
    {
        return denominator;
    }

    public Rational reciprocal ()
    {
        return new Rational (denominator, numerator);
    }


    public Rational plus (Rational op2)
    {
        int commonDenominator = denominator * op2.get_Denominator();
        int numerator1 = numerator * op2.get_Denominator();
        int numerator2 = op2.get_Numerator() * denominator;
        int sum = numerator1 + numerator2;

        return new Rational (sum, commonDenominator);
    }

    public Rational minus (Rational op2)
    {
        int commonDenominator = denominator * op2.get_Denominator();
        int numerator1 = numerator * op2.get_Denominator();
        int numerator2 = op2.get_Numerator() * denominator;
        int difference = numerator1 - numerator2;

        return new Rational (difference, commonDenominator);
    }

    public Rational times (Rational op2)
    {
        int numer = numerator * op2.get_Numerator();
        int denom = denominator * op2.get_Denominator();

        return new Rational (numer, denom);
    }

    public Rational divides (Rational op2)
    {
        return times (op2.reciprocal());
    }

    public boolean equals (Rational op2)
    {
        return ( numerator == op2.get_Numerator() &&
                denominator == op2.get_Denominator() );
    }

    public String toString ()
    {
        String result;

        if (numerator == 0)
            result = "0";
        else
        if (denominator == 1)
            result = numerator + "";
        else
            result = numerator + "/" + denominator;

        return result;
    }

    private void reduce ()
    {
        if (numerator != 0)
        {
            int common = gcd (Math.abs(numerator), denominator);

            numerator = numerator / common;
            denominator = denominator / common;
        }
    }

    private int gcd (int num1, int num2)
    {
        while (num1 != num2)
            if (num1 > num2)
                num1 = num1 - num2;
            else
                num2 = num2 - num1;

        return num1;
    }
}
