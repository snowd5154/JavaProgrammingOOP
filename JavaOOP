/*Write a program that takes a double value w from the command line, creates
four Charge objects with charge value 1.0 that are each distance w in each of
the four cardinal directions from (.5, .5), and prints the potential at (.25, .5)
*/


public class CardinalDirections {

    public static String reverse(String str) {
        //declare a local variable to keep the reverse string
        String result = "";

        //repeat loop
        for (int i = str.length() - 1; i >= 0; i--) {
            result = result + str.charAt(i);
        }
        //return the reverse string
        return result;
    }//end of reverse method

    /*The ReverseTest class implementation will demonstrate a static method named reverse
    that accepts a string as an argument and then returns a string
    contains the same characters of the argument in reverse order.
     */

        public class ReverseTest{
            //reverse method implementation
        public static String reverse(String str) {
            //declare a local variable
            String result = "";
            //repeat the loop
            for (int = str.length()-1; i >= 0; i--)
            {
                result = result + str.charAt(i);
            }
            //return the reverse string
            return result;
        }

        //Main Method
        public static void main(String[] args){
            String str = "Reverse a String";
            //call the reverse method to get the reverse
            //String of the original string
            String revStr = reverse(str);
            System.out.println("Original String: " + str);
            System.out.println("Reverse String: " + revStr);
            }
        }//END MAIN METHOD
    }

/*Write a method that takes in three integers ranged from 0 to 255
and then prints out the converted values on a scale from 0.0-1.0
Write a main method that reads three values in from the user and calls the method.
The first three lines of the output below are from main.
The last line is from the function.
*/

import java.util.Scanner;

public class RGBcolorprogram {

    public static void convertToScale(int red, int green, int blue) {
        System.out.printf("New color is red=%.6f, green=%.6f, blue=%.6f\n", red / 255.0, green / 255.0, blue / 255.0);
    }

    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        System.out.print("Enter a red value (0-255): ");
        int red = in.nextInt();
        System.out.print("Enter a green value (0-255): ");
        int green = in.nextInt();
        System.out.print("Enter a blue value (0-255): ");
        int blue = in.nextInt();

        convertToScale(red, green, blue);
    }
}

/*Write a static method that takes a domain name as argument and returns
the reverse domain (reverse the order of the strings between periods). For example,
the reverse domain of cs.princeton.edu is edu.princeton.cs. This computation
is useful for web log analysis.
 */

import java.util.Scanner;

public class WebLogAnalysis {

    public String reverseDomain(String url){
        //the url is pitted based on "."
        String[] domainSplit = url.split("\\.");
        String domain = "";

        //size of the array is calculated
        int size = domainSplit.length;

        //the last element of the array is saved in the variable domain
        domain = domainSplit[size-1];

        //for loop helps us to save rest of the elements of the array in variable domain which is separated by "."

        for(int i=size-2; i>-1; i--) {
            domain = domain + "." + domainSplit[i];
            return domain;
        }
        public static void main(String[] args){
            Scanner s = new Scanner(System.in);

            //the url value is taken from the user
            System.out.println("Enter your URL: ");
            String url = (String) s.nextLine();
            DomainName d = new DomainName();
            String domain = d.reverseDomain(url);

            System.out.println("The reverse of the domain is: "+domain);
        }
    }

/*Write a program Merge that takes a delimiter string followed by an arbitrary
number of file names as command line arguments, concatenates the corresponding
lines of each file, separated by the delimiter, and then writes the result to standard
output, thus performing the opposite operation from Split
*/

import java.io.File;
import java.io.FileNotFoundException;
import java.util.Scanner;

public class MergeStockMarketData {
    public static void main(String[] args) {
        String delimiter = args[0];
        // ignoring delimiter
        int numberOfFiles = args.length - 1;

        // Create array of Scanner to read the files
        Scanner[] fileReaders = new Scanner[numberOfFiles];

        // iterate till number of files
        for (int i = 0; i < fileReaders.length; i++) {
            try {
                // create an scanner object
                fileReaders[i] = new Scanner(new File(args[i + 1]));
            } catch (FileNotFoundException e) {
                // if not found
                System.out.println(e.getLocalizedMessage());
            }
        }

        boolean hasLine = false;
        do {
            hasLine = false;
            String mergeLine = "";
            // iterate all the files to get next lines
            for (int i = 0; i < fileReaders.length; i++) {
                // if the file has line, read it
                if(fileReaders[i] != null && fileReaders[i].hasNextLine()) {
                    mergeLine += fileReaders[i].nextLine();
                }
                // do not add the delimiter after last file line
                if(i != fileReaders.length -1) {
                    mergeLine += delimiter;
                }
            }

            // Print the mergedLine
            System.out.println(mergeLine);

            // iterate till number of files
            for (int i = 0; i < fileReaders.length; i++) {
                if(fileReaders[i] != null && fileReaders[i].hasNextLine()) {
                    hasLine = true;
                    break;
                }
            }
        }while(hasLine);
    }
}//This code needs three text files to properly function
